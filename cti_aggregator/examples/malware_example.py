#!/usr/bin/env python3

import os
import sys
import json
from datetime import datetime
import argparse

# Add the parent directory to the Python path to allow importing from data_sources
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)

# Fix the import path to ensure modules are found correctly
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# Import after path is set
from data_sources.malware_family import (
    search_malware_families,
    get_recent_malware_families,
    get_malware_details
)

def display_malware_info(malware):
    """
    Display detailed information about a malware family in a formatted way.
    
    Args:
        malware (dict): Malware family object with detailed information
    """
    print("\n" + "="*80)
    print(f"MALWARE FAMILY: {malware.get('name', 'Unknown')}")
    print("="*80)
    
    # Display aliases if available
    if malware.get('aliases'):
        aliases = ", ".join(malware.get('aliases', []))
        print(f"AKA: {aliases}")
    
    # Display basic information
    print(f"\nID: {malware.get('id', 'N/A')}")
    print(f"Type: {malware.get('malware_type', 'Unknown')}")
    print(f"First Seen: {malware.get('publish_date', 'Unknown')}")
    print(f"Last Updated: {malware.get('last_updated', 'Unknown')}")
    
    # Display description if available
    if malware.get('description'):
        print("\nDESCRIPTION:")
        print("-"*80)
        print(malware.get('description', 'No description available'))
        print("-"*80)
    
    # Display threat groups
    if malware.get('threat_groups'):
        print("\nASSOCIATED THREAT GROUPS:")
        for group in malware.get('threat_groups', []):
            print(f"- {group}")
    else:
        print("\nASSOCIATED THREAT GROUPS: None identified")
    
    # Display nation affiliations
    if malware.get('nation_affiliations'):
        print("\nNATION AFFILIATIONS:")
        for nation in malware.get('nation_affiliations', []):
            print(f"- {nation}")
    else:
        print("\nNATION AFFILIATIONS: None identified")
    
    # Display targeted sectors
    if malware.get('targeted_sectors'):
        print("\nTARGETED SECTORS:")
        for sector in malware.get('targeted_sectors', []):
            print(f"- {sector}")
    else:
        print("\nTARGETED SECTORS: None identified")
    
    # Display targeted countries
    if malware.get('targeted_countries'):
        print("\nTARGETED COUNTRIES:")
        for country in malware.get('targeted_countries', []):
            print(f"- {country}")
    else:
        print("\nTARGETED COUNTRIES: None identified")
    
    # Display TTPs (MITRE ATT&CK tactics and techniques)
    if malware.get('ttps'):
        print("\nTACTICS, TECHNIQUES & PROCEDURES (TTPs):")
        
        # Group TTPs by tactic for better organization
        ttps_by_tactic = {}
        for ttp in malware.get('ttps', []):
            tactic = ttp.get('tactic', 'Unknown')
            if tactic not in ttps_by_tactic:
                ttps_by_tactic[tactic] = []
            
            technique_id = ttp.get('technique_id', '')
            technique = ttp.get('technique', 'Unknown')
            ttps_by_tactic[tactic].append(f"{technique} ({technique_id})")
        
        # Display grouped TTPs
        for tactic, techniques in ttps_by_tactic.items():
            print(f"\n{tactic}:")
            for technique in techniques:
                print(f"- {technique}")
    else:
        print("\nTACTICS, TECHNIQUES & PROCEDURES (TTPs): None identified")
    
    print("\n" + "="*80 + "\n")

def main():
    parser = argparse.ArgumentParser(description="Retrieve and display malware family information from CrowdStrike Intel API")
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--search", help="Search for malware families by name or keyword")
    group.add_argument("--recent", type=int, help="Get malware families from the last N days")
    group.add_argument("--id", help="Get details for a specific malware family ID")
    
    parser.add_argument("--limit", type=int, default=5, help="Maximum number of results to display (default: 5)")
    parser.add_argument("--json", action="store_true", help="Output results in JSON format")
    
    args = parser.parse_args()
    
    malware_list = []
    
    if args.search:
        print(f"Searching for malware families matching '{args.search}'...")
        malware_list = search_malware_families(search_term=args.search, limit=args.limit)
    
    elif args.recent:
        print(f"Retrieving malware families from the last {args.recent} days...")
        malware_list = get_recent_malware_families(days=args.recent, limit=args.limit)
    
    elif args.id:
        print(f"Retrieving details for malware family ID '{args.id}'...")
        malware_list = get_malware_details([args.id])
    
    # Display results
    if not malware_list:
        print("No matching malware families found.")
        return
    
    print(f"Found {len(malware_list)} matching malware families.\n")
    
    if args.json:
        # Output in JSON format
        print(json.dumps(malware_list, indent=2))
    else:
        # Display detailed information for each malware family
        for malware in malware_list:
            display_malware_info(malware)

if __name__ == "__main__":
    main() 