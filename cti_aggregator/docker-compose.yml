version: '3.8'

services:
  # Redis service
  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Django backend
  # Uncomment to run the backend in Docker
  # backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.backend
  #   container_name: cti-backend
  #   depends_on:
  #     - redis
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - ./backend:/app/backend
  #     - ./data_sources:/app/data_sources
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_DB=0
  #     - DJANGO_SETTINGS_MODULE=backend.settings
  #   restart: unless-stopped

  # Optional: Celery worker
  # Uncomment to run Celery in Docker
  # celery-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.backend
  #   container_name: celery-worker
  #   command: celery -A backend.celery worker --loglevel=info --pool=solo
  #   depends_on:
  #     - redis
  #     - backend
  #   volumes:
  #     - ./backend:/app/backend
  #     - ./data_sources:/app/data_sources
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_DB=0
  #     - DJANGO_SETTINGS_MODULE=backend.settings
  #   restart: unless-stopped

  # Optional: Celery beat scheduler
  # Uncomment to run Celery beat in Docker
  # celery-beat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.backend
  #   container_name: celery-beat
  #   command: celery -A backend.celery beat --loglevel=info
  #   depends_on:
  #     - redis
  #     - backend
  #   volumes:
  #     - ./backend:/app/backend
  #     - ./data_sources:/app/data_sources
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_DB=0
  #     - DJANGO_SETTINGS_MODULE=backend.settings
  #   restart: unless-stopped

  # Optional: Frontend
  # Uncomment to run the frontend in Docker
  # frontend:
  #   build:
  #     context: ./frontend/cti-dashboard
  #     dockerfile: Dockerfile.frontend
  #   container_name: cti-frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend/cti-dashboard:/app
  #     - /app/node_modules
  #   environment:
  #     - NODE_ENV=development
  #   restart: unless-stopped

volumes:
  redis_data: 