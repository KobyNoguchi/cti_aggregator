"use client"

import React, { useState, useEffect } from 'react'
import { fetchCrowdStrikeMalware, CrowdStrikeMalware, isErrorResponse, ApiErrorResponse } from '@/lib/api'
import { format } from 'date-fns'
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Button } from '@/components/ui/button'
import { 
  RefreshCw,
  Search, 
  AlertCircle,
  ChevronDown,
  ChevronUp,
  X,
  AlertTriangle,
  Wifi,
  ExternalLink
} from 'lucide-react'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

export default function CrowdStrikeMalwareTable() {
  const [malwareFamilies, setMalwareFamilies] = useState<CrowdStrikeMalware[]>([]);
  const [filteredMalware, setFilteredMalware] = useState<CrowdStrikeMalware[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [errorType, setErrorType] = useState<'network' | 'server' | 'data' | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedThreatGroup, setSelectedThreatGroup] = useState('all');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [threatGroups, setThreatGroups] = useState<string[]>([]);
  const [industries, setIndustries] = useState<string[]>([]);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [industriesPopoverOpen, setIndustriesPopoverOpen] = useState(false);
  const [dataFetched, setDataFetched] = useState(false);
  const [retrying, setRetrying] = useState(false);

  // Fetch malware data on component mount (only on client-side)
  useEffect(() => {
    // Only run data fetching on the client to avoid hydration issues
    if (typeof window !== 'undefined' && !dataFetched) {
      fetchData();
      setDataFetched(true);
      
      // Set up hourly refresh
      const intervalId = setInterval(() => {
        fetchData(false);
      }, 60 * 60 * 1000); // 1 hour in milliseconds
      
      // Clean up interval on component unmount
      return () => clearInterval(intervalId);
    }
  }, [dataFetched]);

  // Filter malware when search term or selected filters change
  useEffect(() => {
    if (malwareFamilies && malwareFamilies.length > 0) {
      filterMalware();
    }
  }, [searchTerm, selectedThreatGroup, selectedIndustries, malwareFamilies]);

  // Fetch data from the API
  const fetchData = async (skipCache: boolean = false) => {
    try {
      setLoading(true);
      setError(null);
      setErrorType(null);
      setRetrying(false);
      
      const response = await fetchCrowdStrikeMalware(skipCache);
      
      // Check if the response is an error
      if (isErrorResponse(response)) {
        setError(response.message || 'Failed to fetch CrowdStrike malware data');
        
        // Set error type based on status code
        if (response.status >= 500) {
          setErrorType('server');
        } else if (response.status === 408 || response.status === 503) {
          setErrorType('network');
        } else {
          setErrorType('data');
        }
        
        setMalwareFamilies([]);
      } else {
        // We know it's an array of CrowdStrikeMalware now
        setMalwareFamilies(response);
        
        // Extract unique threat groups for filter dropdown
        const allThreatGroups = response.flatMap(malware => malware.threat_groups || []);
        const uniqueThreatGroups = [...new Set(allThreatGroups)].filter(Boolean);
        setThreatGroups(uniqueThreatGroups);
        
        // Extract unique industries for filter dropdown
        const allIndustries = response.flatMap(malware => malware.targeted_industries || []);
        const uniqueIndustries = [...new Set(allIndustries)].filter(Boolean);
        setIndustries(uniqueIndustries);
        
        setError(null);
        setErrorType(null);
      }
    } catch (err) {
      console.error('Error fetching malware data:', err);
      setError('Failed to fetch CrowdStrike malware data. Please try again later.');
      setErrorType('network');
      setMalwareFamilies([]);
    } finally {
      setLoading(false);
      setRetrying(false);
    }
  };

  // Filter malware based on search term and selected filters
  const filterMalware = () => {
    if (!Array.isArray(malwareFamilies)) {
      setFilteredMalware([]);
      return;
    }
    
    let filtered = [...malwareFamilies];
    
    if (selectedThreatGroup !== 'all') {
      filtered = filtered.filter(malware => 
        malware.threat_groups && malware.threat_groups.includes(selectedThreatGroup)
      );
    }
    
    if (selectedIndustries.length > 0) {
      filtered = filtered.filter(malware => 
        malware.targeted_industries && 
        selectedIndustries.some(industry => malware.targeted_industries?.includes(industry))
      );
    }
    
    if (searchTerm.trim() !== '') {
      const search = searchTerm.toLowerCase();
      filtered = filtered.filter(malware => 
        malware.name.toLowerCase().includes(search) || 
        (malware.description && malware.description.toLowerCase().includes(search)) ||
        (malware.ttps && malware.ttps.some(ttp => ttp.toLowerCase().includes(search)))
      );
    }
    
    setFilteredMalware(filtered);
  };

  // Format date for display
  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'N/A';
    try {
      // Use a fixed timestamp for server-side rendering to avoid hydration errors
      if (typeof window === 'undefined') {
        return 'Loading date...';
      }
      return format(new Date(dateString), 'PPP');
    } catch (error) {
      return 'Invalid date';
    }
  };

  // Toggle row expansion
  const toggleRowExpansion = (malwareId: string) => {
    const newExpandedRows = new Set(expandedRows);
    if (newExpandedRows.has(malwareId)) {
      newExpandedRows.delete(malwareId);
    } else {
      newExpandedRows.add(malwareId);
    }
    setExpandedRows(newExpandedRows);
  };

  // Toggle industry selection
  const toggleIndustry = (industry: string) => {
    setSelectedIndustries(prev => {
      if (prev.includes(industry)) {
        return prev.filter(i => i !== industry);
      } else {
        return [...prev, industry];
      }
    });
  };

  // Clear all selected industries
  const clearIndustries = () => {
    setSelectedIndustries([]);
    setIndustriesPopoverOpen(false);
  };

  // Render different error alerts based on error type
  const renderErrorAlert = () => {
    if (!error) return null;
    
    switch (errorType) {
      case 'network':
        return (
          <Alert variant="destructive" className="mb-4">
            <Wifi className="h-4 w-4" />
            <AlertTitle>Connection Error</AlertTitle>
            <AlertDescription>
              {error}
              <div className="mt-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    setRetrying(true);
                    fetchData(true);
                  }} 
                  disabled={retrying}
                >
                  {retrying ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : <RefreshCw className="h-4 w-4 mr-2" />}
                  Retry Connection
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        );
      case 'server':
        return (
          <Alert variant="destructive" className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>Server Error</AlertTitle>
            <AlertDescription>
              {error}
              <div className="mt-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    setRetrying(true);
                    fetchData(true);
                  }} 
                  disabled={retrying}
                >
                  {retrying ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : <RefreshCw className="h-4 w-4 mr-2" />}
                  Retry Request
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        );
      default:
        return (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        );
    }
  };

  return (
    <Card className="w-full">
      <CardHeader className="pb-2">
        <CardTitle className="text-xl font-semibold">CrowdStrike Malware Families</CardTitle>
        <div className="flex flex-col sm:flex-row justify-between gap-4 mt-4">
          <div className="flex items-center gap-2 w-full sm:w-auto">
            <Search className="w-4 h-4 text-gray-500" />
            <Input
              placeholder="Search malware families..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full sm:w-64"
            />
          </div>
          <div className="flex flex-wrap gap-2 items-center w-full sm:w-auto">
            <Select
              value={selectedThreatGroup}
              onValueChange={setSelectedThreatGroup}
            >
              <SelectTrigger className="w-full sm:w-40">
                <SelectValue placeholder="All Threat Groups" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Threat Groups</SelectItem>
                {threatGroups.map(group => (
                  <SelectItem key={group} value={group}>{group}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            {/* Industries dropdown */}
            <Popover open={industriesPopoverOpen} onOpenChange={setIndustriesPopoverOpen}>
              <PopoverTrigger asChild>
                <Button 
                  variant="outline" 
                  className="w-full sm:w-44 justify-between"
                >
                  {selectedIndustries.length === 0 
                    ? "All Industries" 
                    : `${selectedIndustries.length} selected`}
                  <ChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-full sm:w-80 p-4" align="start">
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h4 className="font-medium">Select Industries</h4>
                    {selectedIndustries.length > 0 && (
                      <Button 
                        variant="ghost" 
                        className="h-auto p-0 text-xs text-muted-foreground" 
                        onClick={clearIndustries}
                      >
                        Clear ({selectedIndustries.length})
                      </Button>
                    )}
                  </div>
                  
                  <div className="border rounded-md p-2 max-h-[200px] overflow-y-auto">
                    <div className="space-y-2">
                      {industries.map((industry) => (
                        <div 
                          key={industry} 
                          className="flex items-center gap-2 hover:bg-gray-100 p-1 rounded cursor-pointer"
                          onClick={() => toggleIndustry(industry)}
                        >
                          <div className={`border rounded-sm w-4 h-4 flex items-center justify-center ${selectedIndustries.includes(industry) ? 'bg-blue-500 border-blue-500' : ''}`}>
                            {selectedIndustries.includes(industry) && (
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="4" strokeLinecap="round" strokeLinejoin="round" className="h-3 w-3">
                                <polyline points="20 6 9 17 4 12"></polyline>
                              </svg>
                            )}
                          </div>
                          <span className="text-sm">{industry}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
            
            <Button 
              variant="outline" 
              size="icon" 
              onClick={() => fetchData(true)} 
              disabled={loading}
            >
              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {renderErrorAlert()}
        
        {selectedIndustries.length > 0 && (
          <div className="mb-4 flex flex-wrap gap-1.5 items-center">
            <span className="text-sm font-medium text-muted-foreground">Filtering by:</span>
            {selectedIndustries.map(industry => (
              <Badge key={industry} variant="secondary" className="flex items-center gap-1">
                {industry}
                <X 
                  className="h-3 w-3 cursor-pointer" 
                  onClick={() => toggleIndustry(industry)}
                />
              </Badge>
            ))}
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-7 text-xs" 
              onClick={clearIndustries}
            >
              Clear all
            </Button>
          </div>
        )}
        
        {loading ? (
          <div className="flex justify-center items-center py-8">
            <RefreshCw className="h-6 w-6 animate-spin text-gray-400" />
          </div>
        ) : (
          <div className="rounded-md border">
            <Table>
              <TableCaption>
                {filteredMalware.length > 0 
                  ? `Showing ${filteredMalware.length} of ${malwareFamilies.length} malware families`
                  : 'No matching malware families found'
                }
              </TableCaption>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[50px]"></TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead className="hidden md:table-cell">Threat Groups</TableHead>
                  <TableHead className="hidden md:table-cell">Industries</TableHead>
                  <TableHead className="hidden md:table-cell">Published Date</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredMalware.length > 0 ? (
                  filteredMalware.map((malware) => (
                    <React.Fragment key={malware.malware_id}>
                      <TableRow
                        className="cursor-pointer"
                        onClick={() => toggleRowExpansion(malware.malware_id)}
                      >
                        <TableCell>
                          {expandedRows.has(malware.malware_id) ? (
                            <ChevronUp className="h-4 w-4" />
                          ) : (
                            <ChevronDown className="h-4 w-4" />
                          )}
                        </TableCell>
                        <TableCell className="font-medium">
                          <div className="flex items-center">
                            <span>{malware.name}</span>
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-7 w-7 ml-1"
                              onClick={(e) => {
                                e.stopPropagation();
                                window.open(`https://intelligence.crowdstrike.com/malware/${malware.malware_id}`, '_blank');
                              }}
                              title="View full report"
                            >
                              <ExternalLink className="h-3.5 w-3.5" />
                            </Button>
                          </div>
                        </TableCell>
                        <TableCell className="hidden md:table-cell">
                          <div className="flex flex-wrap gap-1">
                            {malware.threat_groups && malware.threat_groups.length > 0 ? (
                              malware.threat_groups.slice(0, 2).map((group, index) => (
                                <Badge key={index} variant="outline" className="bg-red-50 text-red-700 border-red-200">
                                  {group}
                                </Badge>
                              ))
                            ) : (
                              <span className="text-gray-500 text-sm">None identified</span>
                            )}
                            {malware.threat_groups && malware.threat_groups.length > 2 && (
                              <Badge variant="outline" className="bg-gray-50 text-gray-700">
                                +{malware.threat_groups.length - 2} more
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="hidden md:table-cell">
                          <div className="flex flex-wrap gap-1">
                            {malware.targeted_industries && malware.targeted_industries.length > 0 ? (
                              malware.targeted_industries.slice(0, 2).map((industry, index) => (
                                <Badge key={index} variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                                  {industry}
                                </Badge>
                              ))
                            ) : (
                              <span className="text-gray-500 text-sm">None identified</span>
                            )}
                            {malware.targeted_industries && malware.targeted_industries.length > 2 && (
                              <Badge variant="outline" className="bg-gray-50 text-gray-700">
                                +{malware.targeted_industries.length - 2} more
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="hidden md:table-cell">
                          {formatDate(malware.publish_date)}
                        </TableCell>
                      </TableRow>
                      {expandedRows.has(malware.malware_id) && (
                        <TableRow>
                          <TableCell colSpan={5} className="p-4 bg-gray-50">
                            <div className="space-y-4">
                              <div className="flex justify-between items-start">
                                <h4 className="text-sm font-semibold mb-1">Description</h4>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-blue-600 hover:text-blue-800"
                                  onClick={() => {
                                    window.open(`https://intelligence.crowdstrike.com/malware/${malware.malware_id}`, '_blank');
                                  }}
                                >
                                  <ExternalLink className="h-4 w-4 mr-1" />
                                  View Full Report
                                </Button>
                              </div>
                              <p className="text-sm text-gray-700">{malware.description || 'No description available'}</p>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <h4 className="text-sm font-semibold mb-1">Threat Groups</h4>
                                  <div className="flex flex-wrap gap-1">
                                    {malware.threat_groups && malware.threat_groups.length > 0 ? (
                                      malware.threat_groups.map((group, index) => (
                                        <Badge key={index} variant="outline" className="bg-red-50 text-red-700 border-red-200">
                                          {group}
                                        </Badge>
                                      ))
                                    ) : (
                                      <span className="text-gray-500 text-sm">None identified</span>
                                    )}
                                  </div>
                                </div>
                                
                                <div>
                                  <h4 className="text-sm font-semibold mb-1">Targeted Industries</h4>
                                  <div className="flex flex-wrap gap-1">
                                    {malware.targeted_industries && malware.targeted_industries.length > 0 ? (
                                      malware.targeted_industries.map((industry, index) => (
                                        <Badge key={index} variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                                          {industry}
                                        </Badge>
                                      ))
                                    ) : (
                                      <span className="text-gray-500 text-sm">None identified</span>
                                    )}
                                  </div>
                                </div>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                  <h4 className="text-sm font-semibold mb-1">Published Date</h4>
                                  <p className="text-sm">{formatDate(malware.publish_date)}</p>
                                </div>
                                <div>
                                  <h4 className="text-sm font-semibold mb-1">Activity Start</h4>
                                  <p className="text-sm">{formatDate(malware.activity_start_date)}</p>
                                </div>
                                <div>
                                  <h4 className="text-sm font-semibold mb-1">Last Updated</h4>
                                  <p className="text-sm">{formatDate(malware.last_update_date)}</p>
                                </div>
                              </div>
                            </div>
                          </TableCell>
                        </TableRow>
                      )}
                    </React.Fragment>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={5} className="h-24 text-center">
                      No results found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  )
} 