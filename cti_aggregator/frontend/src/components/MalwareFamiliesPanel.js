import React, { useState, useEffect } from 'react';
import {
  Box,
  Input,
  Text,
  Heading,
  Flex,
  Spinner,
  Alert,
  Badge,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Button,
  ButtonGroup,
  Tooltip,
  HStack,
  VStack,
  Divider,
  useColorModeValue
} from '@chakra-ui/react';

const MalwareFamiliesPanel = ({ dataSource }) => {
  const [malwareFamilies, setMalwareFamilies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState(null);
  const [selectedMalware, setSelectedMalware] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  
  // Use color mode values
  const tableBg = useColorModeValue('white', 'gray.800');
  const headerBg = useColorModeValue('gray.100', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const hoverBg = useColorModeValue('blue.50', 'blue.900');
  const selectedBg = useColorModeValue('blue.100', 'blue.800');
  const detailsBg = useColorModeValue('gray.50', 'gray.900');

  useEffect(() => {
    const fetchMalwareFamilies = async () => {
      try {
        setLoading(true);
        console.log('Fetching malware families from API...');
        const response = await fetch('http://localhost:8000/api/crowdstrike-malware/');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Malware families fetched successfully:', data);
        setMalwareFamilies(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching malware family data:", error);
        setError(`Failed to load malware family data: ${error.message}`);
        setLoading(false);
      }
    };

    fetchMalwareFamilies();
  }, [dataSource]);

  // Filter malware families based on search term
  const filteredMalwareFamilies = malwareFamilies.filter(malware => 
    malware.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (malware.description && malware.description.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  // Calculate pagination
  const totalPages = Math.ceil(filteredMalwareFamilies.length / itemsPerPage);
  
  // Get current page items
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredMalwareFamilies.slice(indexOfFirstItem, indexOfLastItem);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1); // Reset to first page when searching
  };

  const handleRowClick = (malware) => {
    setSelectedMalware(malware);
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  // Format activity date range
  const formatActivityDates = (startDate, endDate) => {
    if (!startDate && !endDate) return 'Unknown';
    if (startDate && !endDate) return `Since ${formatDate(startDate)}`;
    if (!startDate && endDate) return `Until ${formatDate(endDate)}`;
    return `${formatDate(startDate)} - ${formatDate(endDate)}`;
  };

  // Limit TTPs to display only 3
  const limitTTPs = (ttps, limit = 5) => {
    if (!ttps || ttps.length === 0) return "None";
    if (ttps.length <= limit) return ttps.join(", ");
    return `${ttps.slice(0, limit).join(", ")} +${ttps.length - limit} more`;
  };

  if (loading) return (
    <Flex justify="center" align="center" h="100%">
      <Spinner size="xl" color="blue.500" thickness="4px" />
    </Flex>
  );
  
  if (error) return (
    <Alert status="error" borderRadius="md">
      {error}
    </Alert>
  );

  return (
    <Box h="100%" display="flex" flexDirection="column">
      <Heading as="h2" size="md" mb={4}>CrowdStrike Malware Families</Heading>
      
      <Box mb={3}>
        <Input
          placeholder="Search malware families by name or description..."
          value={searchTerm}
          onChange={handleSearchChange}
          size="sm"
        />
      </Box>
      
      <Box 
        flex="1" 
        borderWidth="1px" 
        borderColor={borderColor} 
        borderRadius="md" 
        overflow="hidden"
        mb={3}
      >
        <Box overflowY="auto" maxH="400px" bg={tableBg}>
          <Table size="sm" variant="simple">
            <Thead position="sticky" top={0} zIndex={1} bg={headerBg}>
              <Tr>
                <Th width="15%">Publish Date</Th>
                <Th width="18%">Name</Th>
                <Th width="15%">Activity Dates</Th>
                <Th width="14%">Threat Group</Th>
                <Th width="23%">TTPs</Th>
                <Th width="15%">Industries</Th>
              </Tr>
            </Thead>
            <Tbody>
              {currentItems.length > 0 ? (
                currentItems.map((malware) => (
                  <Tr 
                    key={malware.malware_id} 
                    onClick={() => handleRowClick(malware)}
                    bg={selectedMalware && selectedMalware.malware_id === malware.malware_id ? selectedBg : 'inherit'}
                    _hover={{ bg: hoverBg, cursor: 'pointer' }}
                    transition="background-color 0.2s"
                  >
                    <Td>{formatDate(malware.publish_date)}</Td>
                    <Td fontWeight="semibold">{malware.name || 'N/A'}</Td>
                    <Td>{formatActivityDates(malware.activity_start_date, malware.activity_end_date)}</Td>
                    <Td>
                      {malware.threat_groups && malware.threat_groups.length > 0 
                        ? malware.threat_groups[0] 
                        : 'Unknown'}
                    </Td>
                    <Td isTruncated>
                      <Tooltip 
                        label={malware.ttps?.join(', ') || 'No TTPs available'} 
                        hasArrow 
                        placement="top"
                      >
                        <Text>{limitTTPs(malware.ttps, 5)}</Text>
                      </Tooltip>
                    </Td>
                    <Td>
                      {malware.targeted_industries && malware.targeted_industries.length > 0 
                        ? (
                          <HStack spacing={1}>
                            {malware.targeted_industries.slice(0, 2).map((industry, idx) => (
                              <Badge key={idx} colorScheme="purple" size="sm">
                                {industry}
                              </Badge>
                            ))}
                            {malware.targeted_industries.length > 2 && (
                              <Badge colorScheme="purple" size="sm">
                                +{malware.targeted_industries.length - 2}
                              </Badge>
                            )}
                          </HStack>
                        ) 
                        : 'Unknown'
                      }
                    </Td>
                  </Tr>
                ))
              ) : (
                <Tr>
                  <Td colSpan={6} textAlign="center" py={4}>
                    <Text color="gray.500">No malware families found.</Text>
                  </Td>
                </Tr>
              )}
            </Tbody>
          </Table>
        </Box>

        {/* Pagination Controls */}
        {totalPages > 1 && (
          <Flex justify="center" align="center" p={2} bg={headerBg}>
            <ButtonGroup size="xs" isAttached variant="outline">
              <Button
                onClick={() => handlePageChange(1)}
                isDisabled={currentPage === 1}
                colorScheme="blue"
              >
                First
              </Button>
              <Button
                onClick={() => handlePageChange(currentPage - 1)}
                isDisabled={currentPage === 1}
                colorScheme="blue"
              >
                Prev
              </Button>
              <Button colorScheme="blue" variant="solid">
                {currentPage} of {totalPages}
              </Button>
              <Button
                onClick={() => handlePageChange(currentPage + 1)}
                isDisabled={currentPage === totalPages}
                colorScheme="blue"
              >
                Next
              </Button>
              <Button
                onClick={() => handlePageChange(totalPages)}
                isDisabled={currentPage === totalPages}
                colorScheme="blue"
              >
                Last
              </Button>
            </ButtonGroup>
          </Flex>
        )}
      </Box>
      
      {/* Malware Details */}
      {selectedMalware && (
        <Box 
          p={3} 
          bg={detailsBg} 
          borderRadius="md"
          height="250px"
          overflow="auto"
        >
          <VStack align="start" spacing={3} width="100%">
            <Heading size="sm">{selectedMalware.name}</Heading>
            
            <Text fontSize="sm">{selectedMalware.description}</Text>
            
            <Divider />
            
            <HStack width="100%" justify="space-between" wrap="wrap">
              <Box>
                <Text fontSize="xs" fontWeight="bold" color="gray.500">Publish Date</Text>
                <Text fontSize="sm">{formatDate(selectedMalware.publish_date)}</Text>
              </Box>
              
              <Box>
                <Text fontSize="xs" fontWeight="bold" color="gray.500">Activity Period</Text>
                <Text fontSize="sm">{formatActivityDates(selectedMalware.activity_start_date, selectedMalware.activity_end_date)}</Text>
              </Box>
              
              <Box>
                <Text fontSize="xs" fontWeight="bold" color="gray.500">Associated Threat Groups</Text>
                <HStack spacing={1}>
                  {selectedMalware.threat_groups && selectedMalware.threat_groups.length > 0 ? 
                    selectedMalware.threat_groups.map((group, idx) => (
                      <Badge key={idx} colorScheme="red">{group}</Badge>
                    )) : 
                    <Text fontSize="sm">Unknown</Text>
                  }
                </HStack>
              </Box>
            </HStack>
            
            <Divider />
            
            <Box width="100%">
              <Text fontSize="xs" fontWeight="bold" color="gray.500">Tactics, Techniques & Procedures</Text>
              <HStack spacing={2} mt={1} wrap="wrap">
                {selectedMalware.ttps && selectedMalware.ttps.length > 0 ? 
                  selectedMalware.ttps.map((ttp, idx) => (
                    <Badge key={idx} colorScheme="blue" px={2} py={1} borderRadius="full">{ttp}</Badge>
                  )) : 
                  <Text fontSize="sm">No TTPs available</Text>
                }
              </HStack>
            </Box>
            
            <Box width="100%">
              <Text fontSize="xs" fontWeight="bold" color="gray.500">Targeted Industries</Text>
              <HStack spacing={2} mt={1} wrap="wrap">
                {selectedMalware.targeted_industries && selectedMalware.targeted_industries.length > 0 ? 
                  selectedMalware.targeted_industries.map((industry, idx) => (
                    <Badge key={idx} colorScheme="purple" px={2} py={1} borderRadius="full">{industry}</Badge>
                  )) : 
                  <Text fontSize="sm">No industry targeting information</Text>
                }
              </HStack>
            </Box>
          </VStack>
        </Box>
      )}

      {/* Page info */}
      {filteredMalwareFamilies.length > 0 && (
        <Text fontSize="xs" color="gray.500" textAlign="center" mt={1}>
          Showing {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, filteredMalwareFamilies.length)} of {filteredMalwareFamilies.length} malware families
        </Text>
      )}
    </Box>
  );
};

export default MalwareFamiliesPanel; 