// src/components/VulnerabilityPanel.js
import React, { useState, useEffect } from 'react';
import {
  Box,
  Input,
  Text,
  Heading,
  Flex,
  Spinner,
  Alert,
  Badge,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  useColorModeValue
} from '@chakra-ui/react';

const VulnerabilityPanel = ({ dataSource }) => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState(null);
  const [selectedVuln, setSelectedVuln] = useState(null);

  // Use color mode values
  const tableBg = useColorModeValue('white', 'gray.800');
  const headerBg = useColorModeValue('gray.100', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const hoverBg = useColorModeValue('blue.50', 'blue.900');
  const selectedBg = useColorModeValue('blue.100', 'blue.800');
  const descriptionBg = useColorModeValue('gray.50', 'gray.900');

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        setLoading(true);
        console.log('Fetching vulnerabilities from API...');
        const response = await fetch('http://localhost:8000/api/vulnerabilities/');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Vulnerabilities fetched successfully:', data);
        setVulnerabilities(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching vulnerability data:", error);
        setError(`Failed to load vulnerability data: ${error.message}`);
        setLoading(false);
      }
    };

    fetchVulnerabilities();
  }, [dataSource]);

  // Filter vulnerabilities based on search term
  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    vuln.cve_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (vuln.vulnerability_name && vuln.vulnerability_name.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (vuln.description && vuln.description.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleRowClick = (vuln) => {
    setSelectedVuln(vuln);
  };

  const getSeverityColor = (severity) => {
    const severityLower = (severity || '').toLowerCase();
    switch (severityLower) {
      case 'critical':
        return 'red';
      case 'high':
        return 'orange';
      case 'medium':
        return 'yellow';
      case 'low':
        return 'green';
      default:
        return 'gray';
    }
  };

  if (loading) return (
    <Flex justify="center" align="center" h="100%">
      <Spinner size="xl" color="blue.500" thickness="4px" />
    </Flex>
  );
  
  if (error) return (
    <Alert status="error" borderRadius="md">
      {error}
    </Alert>
  );

  return (
    <Box h="100%" display="flex" flexDirection="column">
      <Box mb={3}>
        <Input
          placeholder="Search vulnerabilities by CVE ID, name, or description..."
          value={searchTerm}
          onChange={handleSearchChange}
          size="sm"
        />
      </Box>
      
      <Box 
        flex="1" 
        borderWidth="1px" 
        borderColor={borderColor} 
        borderRadius="md" 
        overflow="hidden"
        mb={3}
      >
        <Box overflowY="auto" maxH="calc(100% - 10px)" bg={tableBg}>
          <Table size="sm" variant="simple">
            <Thead position="sticky" top={0} zIndex={1} bg={headerBg}>
              <Tr>
                <Th width="15%">CVE-ID</Th>
                <Th width="40%">Name</Th>
                <Th width="15%">Severity</Th>
                <Th width="15%">Published Date</Th>
              </Tr>
            </Thead>
            <Tbody>
              {filteredVulnerabilities.length > 0 ? (
                filteredVulnerabilities.map((vuln) => (
                  <Tr 
                    key={vuln.cve_id || vuln.id} 
                    onClick={() => handleRowClick(vuln)}
                    bg={selectedVuln && selectedVuln.cve_id === vuln.cve_id ? selectedBg : 'inherit'}
                    _hover={{ bg: hoverBg, cursor: 'pointer' }}
                    transition="background-color 0.2s"
                  >
                    <Td>{vuln.cve_id || 'N/A'}</Td>
                    <Td isTruncated maxW="40vw">{vuln.vulnerability_name || 'N/A'}</Td>
                    <Td>
                      <Badge colorScheme={getSeverityColor(vuln.severity)}>
                        {vuln.severity || 'Unknown'}
                      </Badge>
                    </Td>
                    <Td>{vuln.published_date ? new Date(vuln.published_date).toLocaleDateString() : 'N/A'}</Td>
                  </Tr>
                ))
              ) : (
                <Tr>
                  <Td colSpan={4} textAlign="center" py={4}>
                    <Text color="gray.500">No vulnerabilities found.</Text>
                  </Td>
                </Tr>
              )}
            </Tbody>
          </Table>
        </Box>
      </Box>
      
      <Box 
        p={3} 
        bg={descriptionBg} 
        borderRadius="md"
        height="100px"
      >
        <Heading size="xs" mb={1}>Description</Heading>
        <Box 
          overflowY="auto" 
          p={2} 
          bg={tableBg} 
          borderRadius="sm" 
          borderWidth="1px"
          borderColor={borderColor}
          height="calc(100% - 24px)"
        >
          {selectedVuln ? (
            <Text fontSize="sm">{selectedVuln.description || 'No description available.'}</Text>
          ) : searchTerm && filteredVulnerabilities.length > 0 ? (
            <Text fontSize="sm">{filteredVulnerabilities[0].description || 'No description available.'}</Text>
          ) : (
            <Text fontSize="sm" color="gray.500">Select a vulnerability to view details.</Text>
          )}
        </Box>
      </Box>
    </Box>
  );
};

export default VulnerabilityPanel;
