// src/components/VulnerabilityPanel.js
import React, { useState, useEffect } from 'react';
import './VulnerabilityPanel.css';

const VulnerabilityPanel = ({ dataSource }) => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState(null);
  const [selectedVuln, setSelectedVuln] = useState(null);

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        setLoading(true);
        const response = await fetch('http://localhost:8000/api/vulnerabilities/');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        setVulnerabilities(data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching vulnerability data:", error);
        setError("Failed to load vulnerability data. Please try again later.");
        setLoading(false);
      }
    };

    fetchVulnerabilities();
  }, [dataSource]);

  // Filter vulnerabilities based on search term
  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    vuln.cve_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (vuln.vulnerability_name && vuln.vulnerability_name.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (vuln.description && vuln.description.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleRowClick = (vuln) => {
    setSelectedVuln(vuln);
  };

  if (loading) return <div className="loading">Loading vulnerabilities...</div>;
  if (error) return <div className="error">{error}</div>;

  return (
    <div className="vulnerability-panel">
      <div className="search-container">
        <input
          type="text"
          placeholder="Search vulnerabilities by CVE ID, name, or description..."
          value={searchTerm}
          onChange={handleSearchChange}
          className="search-input"
        />
      </div>
      
      <div className="vulnerability-table-container">
        <table className="vulnerability-table">
          <thead>
            <tr>
              <th>CVE-ID</th>
              <th>Name</th>
              <th>Severity</th>
              <th>Published Date</th>
            </tr>
          </thead>
          <tbody>
            {filteredVulnerabilities.length > 0 ? (
              filteredVulnerabilities.map((vuln) => (
                <tr 
                  key={vuln.cve_id} 
                  className={`vuln-row ${selectedVuln && selectedVuln.cve_id === vuln.cve_id ? 'selected' : ''}`}
                  onClick={() => handleRowClick(vuln)}
                >
                  <td>{vuln.cve_id}</td>
                  <td>{vuln.vulnerability_name || 'N/A'}</td>
                  <td className={`severity ${vuln.severity?.toLowerCase() || 'unknown'}`}>
                    {vuln.severity || 'Unknown'}
                  </td>
                  <td>{new Date(vuln.published_date).toLocaleDateString()}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4" className="no-results">No vulnerabilities found.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      
      <div className="vuln-details">
        <h3>Description</h3>
        <div className="description-container">
          {selectedVuln ? (
            <p>{selectedVuln.description || 'No description available.'}</p>
          ) : searchTerm && filteredVulnerabilities.length > 0 ? (
            <p>{filteredVulnerabilities[0].description || 'No description available.'}</p>
          ) : (
            <p>Select a vulnerability to view details.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityPanel;
