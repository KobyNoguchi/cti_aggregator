"use client";

import React, { useState, useEffect } from 'react';

interface MalwareFamily {
  id: string;
  malware_id: string;
  name: string;
  description: string;
  ttps: string[];
  targeted_industries: string[];
  threat_groups: string[];
  publish_date: string;
  activity_start_date?: string;
  activity_end_date?: string;
  last_update_date: string;
}

const CrowdStrikeMalware: React.FC = () => {
  const [malwareFamilies, setMalwareFamilies] = useState<MalwareFamily[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedThreatGroup, setSelectedThreatGroup] = useState('all');
  const [selectedIndustry, setSelectedIndustry] = useState('all');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchMalwareFamilies = async () => {
      const endpoint = 'http://localhost:8000/api/crowdstrike/malware/';
      
      try {
        setLoading(true);
        console.log(`Fetching CrowdStrike Malware data from: ${endpoint}`);
        const response = await fetch(endpoint);
        
        if (response.ok) {
          const data = await response.json();
          console.log('CrowdStrike Malware data fetched successfully:', data);
          setMalwareFamilies(data);
        } else {
          throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }
      } catch (error: any) {
        console.error("Error fetching CrowdStrike Malware data:", error);
        setError(`Failed to load CrowdStrike Malware data: ${error.message}. Please make sure your Django backend is running and the endpoint is available.`);
      } finally {
        setLoading(false);
      }
    };

    fetchMalwareFamilies();
  }, []);

  // Filter malware families based on search term and selected filters
  const filteredMalwareFamilies = malwareFamilies.filter(malware => {
    const matchesSearch = 
      malware.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      malware.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      malware.malware_id?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesThreatGroup = selectedThreatGroup === 'all' || 
      (malware.threat_groups && malware.threat_groups.includes(selectedThreatGroup));
    
    const matchesIndustry = selectedIndustry === 'all' || 
      (malware.targeted_industries && malware.targeted_industries.includes(selectedIndustry));
    
    return matchesSearch && matchesThreatGroup && matchesIndustry;
  });

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleThreatGroupChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedThreatGroup(e.target.value);
  };

  const handleIndustryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedIndustry(e.target.value);
  };

  // Get unique threat groups and industries for the filter dropdowns
  const threatGroups = ['all', ...Array.from(new Set(
    malwareFamilies.flatMap(malware => malware.threat_groups || [])
  ))];
  
  const industries = ['all', ...Array.from(new Set(
    malwareFamilies.flatMap(malware => malware.targeted_industries || [])
  ))];

  if (loading) return (
    <div className="flex justify-center items-center h-full">
      <div className="h-8 w-8 animate-spin rounded-full border-b-2 border-primary"></div>
    </div>
  );
  
  if (error) return (
    <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-md border border-red-200 dark:border-red-800">
      <p className="text-red-700 dark:text-red-400">{error}</p>
      <div className="mt-2 text-xs text-gray-600 dark:text-gray-400">
        <p>API endpoint for CrowdStrike Malware data:</p>
        <ul className="mt-1 list-disc pl-5">
          <li>/api/crowdstrike/malware/</li>
        </ul>
        <p className="mt-2">Make sure your Django backend server is running and the endpoint is properly configured.</p>
      </div>
    </div>
  );

  return (
    <div className="h-full">
      <div className="flex mb-4 gap-2 flex-wrap">
        <div className="relative flex-1 min-w-[200px]">
          <input
            type="text"
            placeholder="Search malware families..."
            value={searchTerm}
            onChange={handleSearchChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md pl-10 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
          />
          <div className="absolute left-3 top-2.5 h-5 w-5 text-gray-400">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        <select
          value={selectedThreatGroup}
          onChange={handleThreatGroupChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-[180px] dark:bg-gray-800 dark:border-gray-700 dark:text-white"
        >
          {threatGroups.map(group => (
            <option key={group} value={group}>
              {group === 'all' ? 'All Threat Groups' : group}
            </option>
          ))}
        </select>
        <select
          value={selectedIndustry}
          onChange={handleIndustryChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-[180px] dark:bg-gray-800 dark:border-gray-700 dark:text-white"
        >
          {industries.map(industry => (
            <option key={industry} value={industry}>
              {industry === 'all' ? 'All Industries' : industry}
            </option>
          ))}
        </select>
      </div>

      <div className="overflow-y-auto h-[calc(100%-50px)] pr-2">
        {filteredMalwareFamilies.length > 0 ? (
          <div className="space-y-4">
            {filteredMalwareFamilies.map((malware) => (
              <div key={malware.id} className="border rounded-md p-4 transition-all hover:shadow-md dark:bg-gray-800 dark:border-gray-700">
                <div className="flex justify-between items-center mb-2">
                  <span className="inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    {malware.malware_id || 'No ID'}
                  </span>
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {malware.publish_date ? new Date(malware.publish_date).toLocaleDateString() : 'Unknown date'}
                  </span>
                </div>
                
                <h3 className="text-sm font-semibold mb-2 dark:text-white">
                  {malware.name || 'Unnamed Malware Family'}
                </h3>
                
                {malware.description ? (
                  <p className="text-sm text-gray-700 dark:text-gray-300 mb-3">
                    {malware.description.length > 150 
                      ? `${malware.description.substring(0, 150)}...` 
                      : malware.description}
                  </p>
                ) : (
                  <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">No description available</p>
                )}

                <div className="space-y-3">
                  {/* Threat Groups */}
                  {malware.threat_groups && malware.threat_groups.length > 0 && (
                    <div>
                      <h4 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1">Threat Groups:</h4>
                      <div className="flex flex-wrap gap-1">
                        {malware.threat_groups.map((group, index) => (
                          <span 
                            key={index}
                            className="inline-flex items-center rounded-full bg-red-50 px-2 py-0.5 text-xs font-medium text-red-700 dark:bg-red-900/30 dark:text-red-300"
                          >
                            {group}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Tactics, Techniques & Procedures */}
                  {malware.ttps && malware.ttps.length > 0 && (
                    <div>
                      <h4 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1">TTPs:</h4>
                      <div className="flex flex-wrap gap-1">
                        {malware.ttps.map((ttp, index) => (
                          <span 
                            key={index}
                            className="inline-flex items-center rounded-full bg-purple-50 px-2 py-0.5 text-xs font-medium text-purple-700 dark:bg-purple-900/30 dark:text-purple-300"
                          >
                            {ttp}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Targeted Industries */}
                  {malware.targeted_industries && malware.targeted_industries.length > 0 && (
                    <div>
                      <h4 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-1">Targeted Industries:</h4>
                      <div className="flex flex-wrap gap-1">
                        {malware.targeted_industries.map((industry, index) => (
                          <span 
                            key={index}
                            className="inline-flex items-center rounded-full bg-green-50 px-2 py-0.5 text-xs font-medium text-green-700 dark:bg-green-900/30 dark:text-green-300"
                          >
                            {industry}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-600 dark:text-gray-400">
                  <div className="flex flex-wrap gap-x-4 gap-y-1">
                    {malware.activity_start_date && (
                      <div>
                        <span className="font-medium">Active since: </span>
                        {new Date(malware.activity_start_date).toLocaleDateString()}
                      </div>
                    )}
                    {malware.activity_end_date && (
                      <div>
                        <span className="font-medium">Active until: </span>
                        {new Date(malware.activity_end_date).toLocaleDateString()}
                      </div>
                    )}
                    <div>
                      <span className="font-medium">Last updated: </span>
                      {new Date(malware.last_update_date).toLocaleDateString()}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="flex justify-center items-center h-full text-gray-500 dark:text-gray-400">
            <p>No malware families found matching your criteria.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default CrowdStrikeMalware; 