"""
Module providing access to malware family data.
All mock implementations have been replaced with simple error responses.
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def query_malware_families(limit=50, offset=0, filter_string=None):
    """
    Query malware families. Returns error message instead of mock data.
    
    Args:
        limit (int): Maximum number of results to return
        offset (int): Starting offset for results pagination
        filter_string (str): FQL filter string to restrict results
        
    Returns:
        list: List with a single error ID
    """
    logger.info("Mock data generation has been disabled")
    return ["error-404"]

def get_malware_details(malware_ids):
    """
    Get malware details. Returns error message instead of mock data.
    
    Args:
        malware_ids (list): List of malware family IDs to retrieve details for
        
    Returns:
        list: List with a single error object
    """
    logger.info("Mock data generation has been disabled")
    
    return [{
        "id": "error-404",
        "name": "404 Not Found",
        "description": "Could not retrieve malware details. Mock data generation has been disabled.",
        "publish_date": datetime.now().strftime("%Y-%m-%d"),
        "last_updated": datetime.now().strftime("%Y-%m-%d"),
        "malware_type": "N/A",
        "threat_groups": [],
        "nation_affiliations": [],
        "ttps": [],
        "targeted_sectors": [],
        "targeted_countries": [],
        "family_id": "error",
        "aliases": ["Data Unavailable"]
    }]

def search_malware_families(search_term=None, limit=20):
    """
    Search malware families. Returns error message instead of mock data.
    
    Args:
        search_term (str): Text to search for in malware family names or descriptions
        limit (int): Maximum number of results to return
        
    Returns:
        list: List with a single error object
    """
    logger.info("Mock data generation has been disabled")
    
    return [{
        "id": "error-404",
        "name": "404 Not Found",
        "description": "Could not search for malware families. Mock data generation has been disabled.",
        "publish_date": datetime.now().strftime("%Y-%m-%d"),
        "last_updated": datetime.now().strftime("%Y-%m-%d"),
        "malware_type": "N/A",
        "threat_groups": [],
        "nation_affiliations": [],
        "ttps": [],
        "targeted_sectors": [],
        "targeted_countries": [],
        "family_id": "error",
        "aliases": ["Data Unavailable"]
    }]

def get_recent_malware_families(days=30, limit=20):
    """
    Get recent malware families. Returns error message instead of mock data.
    
    Args:
        days (int): Number of days to look back
        limit (int): Maximum number of results to return
        
    Returns:
        list: List with a single error object
    """
    logger.info("Mock data generation has been disabled")
    
    return [{
        "id": "error-404",
        "name": "404 Not Found",
        "description": "Could not retrieve recent malware families. Mock data generation has been disabled.",
        "publish_date": datetime.now().strftime("%Y-%m-%d"),
        "last_updated": datetime.now().strftime("%Y-%m-%d"),
        "malware_type": "N/A",
        "threat_groups": [],
        "nation_affiliations": [],
        "ttps": [],
        "targeted_sectors": [],
        "targeted_countries": [],
        "family_id": "error",
        "aliases": ["Data Unavailable"]
    }]

def test_malware_module():
    """
    Test function to verify the malware module is working correctly.
    """
    logger.info("Mock data generation has been disabled")
    logger.info("Testing real API integration is required")
    
    return False

if __name__ == "__main__":
    test_malware_module() 