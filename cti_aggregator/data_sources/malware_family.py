"""
Mock version of the malware_family module for development and testing.
This module provides sample data without requiring the actual CrowdStrike API.
"""

import os
import sys
import json
from datetime import datetime, timedelta
import random

# Sample data for development and testing
SAMPLE_MALWARE_DATA = [
    {
        "id": "sample-malware-001",
        "name": "BLACKCAT Ransomware",
        "description": "BLACKCAT (aka ALPHV) is a ransomware-as-a-service (RaaS) operation that emerged in November 2021. It is written in Rust and targets both Windows and Linux systems.",
        "publish_date": "2021-11-18",
        "last_updated": "2023-07-22",
        "malware_type": "Ransomware",
        "threat_groups": ["CARBON SPIDER", "PINCHY SPIDER"],
        "nation_affiliations": ["Russia"],
        "ttps": [
            {"tactic": "Initial Access", "technique_id": "T1566.001", "technique": "Phishing: Spearphishing Attachment"},
            {"tactic": "Execution", "technique_id": "T1059.003", "technique": "Command and Scripting Interpreter: Windows Command Shell"},
            {"tactic": "Defense Evasion", "technique_id": "T1027", "technique": "Obfuscated Files or Information"},
            {"tactic": "Impact", "technique_id": "T1486", "technique": "Data Encrypted for Impact"}
        ],
        "targeted_sectors": ["Healthcare", "Manufacturing", "Financial Services", "Technology", "Government"],
        "targeted_countries": ["United States", "United Kingdom", "Germany", "Canada", "Australia"],
        "family_id": "alphv",
        "aliases": ["ALPHV", "BlackCat Ransomware", "NOBERUS"]
    },
    {
        "id": "sample-malware-002",
        "name": "CONTI Ransomware",
        "description": "CONTI is a ransomware variant first observed in 2020. It is believed to be operated by a Russia-based threat group and uses a double extortion model.",
        "publish_date": "2020-05-14",
        "last_updated": "2022-06-10",
        "malware_type": "Ransomware",
        "threat_groups": ["WIZARD SPIDER"],
        "nation_affiliations": ["Russia"],
        "ttps": [
            {"tactic": "Initial Access", "technique_id": "T1566", "technique": "Phishing"},
            {"tactic": "Execution", "technique_id": "T1204", "technique": "User Execution"},
            {"tactic": "Persistence", "technique_id": "T1053", "technique": "Scheduled Task/Job"},
            {"tactic": "Defense Evasion", "technique_id": "T1562", "technique": "Impair Defenses"}
        ],
        "targeted_sectors": ["Healthcare", "Financial Services", "Government", "Critical Infrastructure"],
        "targeted_countries": ["United States", "Canada", "United Kingdom", "France", "Italy"],
        "family_id": "conti",
        "aliases": ["Conti Ransomware", "RYUK V2"]
    },
    {
        "id": "sample-malware-003",
        "name": "LAPSUS$ Data Extortion",
        "description": "LAPSUS$ is a data extortion group that emerged in late 2021. Unlike traditional ransomware groups, they focus on data theft and extortion without using encryption.",
        "publish_date": "2021-12-09",
        "last_updated": "2023-01-15",
        "malware_type": "Data Theft",
        "threat_groups": ["LAPSUS$"],
        "nation_affiliations": ["Brazil", "United Kingdom"],
        "ttps": [
            {"tactic": "Initial Access", "technique_id": "T1078", "technique": "Valid Accounts"},
            {"tactic": "Credential Access", "technique_id": "T1555", "technique": "Credentials from Password Stores"},
            {"tactic": "Exfiltration", "technique_id": "T1567", "technique": "Exfiltration Over Web Service"},
            {"tactic": "Impact", "technique_id": "T1565", "technique": "Data Manipulation"}
        ],
        "targeted_sectors": ["Technology", "Gaming", "Telecommunications", "Media"],
        "targeted_countries": ["United States", "United Kingdom", "Brazil", "Portugal", "South Korea"],
        "family_id": "lapsus",
        "aliases": ["DEV-0537", "LAPSUS$ Extortion"]
    },
    {
        "id": "sample-malware-004",
        "name": "EMOTET Malware",
        "description": "EMOTET is a modular banking Trojan that primarily functions as a downloader or dropper of other banking Trojans. It has been active since 2014 and is considered one of the most costly and destructive malware variants.",
        "publish_date": "2014-06-15",
        "last_updated": "2023-05-18",
        "malware_type": "Banking Trojan",
        "threat_groups": ["MUMMY SPIDER"],
        "nation_affiliations": ["Russia", "Eastern Europe"],
        "ttps": [
            {"tactic": "Initial Access", "technique_id": "T1566.001", "technique": "Phishing: Spearphishing Attachment"},
            {"tactic": "Execution", "technique_id": "T1204.002", "technique": "User Execution: Malicious File"},
            {"tactic": "Command and Control", "technique_id": "T1071", "technique": "Application Layer Protocol"},
            {"tactic": "Collection", "technique_id": "T1114", "technique": "Email Collection"}
        ],
        "targeted_sectors": ["Financial Services", "Healthcare", "Government", "Manufacturing"],
        "targeted_countries": ["United States", "Germany", "United Kingdom", "Japan", "Canada"],
        "family_id": "emotet",
        "aliases": ["Geodo", "Heodo", "Feodo", "E4"]
    },
    {
        "id": "sample-malware-005",
        "name": "COVENANT C2 Framework",
        "description": "COVENANT is a command and control (C2) framework used by threat actors for post-exploitation activities after gaining initial access to a target environment.",
        "publish_date": "2018-11-29",
        "last_updated": "2022-03-14",
        "malware_type": "Command & Control",
        "threat_groups": ["Multiple Threat Actors"],
        "nation_affiliations": [],
        "ttps": [
            {"tactic": "Command and Control", "technique_id": "T1071.001", "technique": "Application Layer Protocol: Web Protocols"},
            {"tactic": "Defense Evasion", "technique_id": "T1140", "technique": "Deobfuscate/Decode Files or Information"},
            {"tactic": "Discovery", "technique_id": "T1082", "technique": "System Information Discovery"},
            {"tactic": "Lateral Movement", "technique_id": "T1021", "technique": "Remote Services"}
        ],
        "targeted_sectors": ["Government", "Defense", "Financial Services", "Critical Infrastructure"],
        "targeted_countries": ["United States", "European Union", "United Kingdom", "NATO Countries"],
        "family_id": "covenant",
        "aliases": ["Covenant C2"]
    }
]

def query_malware_families(limit=50, offset=0, filter_string=None):
    """
    Mock implementation of query_malware_families.
    
    Args:
        limit (int): Maximum number of results to return
        offset (int): Starting offset for results pagination
        filter_string (str): FQL filter string to restrict results
        
    Returns:
        list: List of malware family IDs 
    """
    print(f"[MOCK] Querying malware families with filter: {filter_string}")
    
    # Return all IDs since this is just sample data
    return [malware["id"] for malware in SAMPLE_MALWARE_DATA]

def get_malware_details(malware_ids):
    """
    Mock implementation of get_malware_details.
    
    Args:
        malware_ids (list): List of malware family IDs to retrieve details for
        
    Returns:
        list: List of malware family objects with detailed information
    """
    if not malware_ids:
        return []
    
    print(f"[MOCK] Getting details for {len(malware_ids)} malware families")
    
    # Filter the sample data based on the requested IDs
    result = []
    for malware in SAMPLE_MALWARE_DATA:
        if malware["id"] in malware_ids:
            result.append(malware)
    
    return result

def search_malware_families(search_term=None, limit=20):
    """
    Mock implementation of search_malware_families.
    
    Args:
        search_term (str): Text to search for in malware family names or descriptions
        limit (int): Maximum number of results to return
        
    Returns:
        list: List of matching malware family objects
    """
    print(f"[MOCK] Searching for malware families with term: {search_term}")
    
    if not search_term:
        # Return all samples up to the limit if no search term
        return SAMPLE_MALWARE_DATA[:limit]
    
    # Simple search implementation for demonstration
    result = []
    search_term = search_term.lower()
    
    for malware in SAMPLE_MALWARE_DATA:
        if (search_term in malware["name"].lower() or 
            search_term in malware["description"].lower() or
            any(search_term in alias.lower() for alias in malware["aliases"])):
            result.append(malware)
            
            if len(result) >= limit:
                break
    
    return result

def get_recent_malware_families(days=30, limit=20):
    """
    Mock implementation of get_recent_malware_families.
    
    Args:
        days (int): Number of days to look back
        limit (int): Maximum number of results to return
        
    Returns:
        list: List of malware family objects discovered within the specified period
    """
    print(f"[MOCK] Getting malware families from the last {days} days")
    
    # Calculate the cutoff date
    today = datetime.now()
    cutoff = today - timedelta(days=days)
    cutoff_str = cutoff.strftime("%Y-%m-%d")
    
    # Filter the sample data based on the publish date
    result = []
    for malware in SAMPLE_MALWARE_DATA:
        if malware["publish_date"] >= cutoff_str:
            result.append(malware)
            
            if len(result) >= limit:
                break
    
    # If no results based on dates, return random samples for demonstration
    if not result:
        return random.sample(SAMPLE_MALWARE_DATA, min(limit, len(SAMPLE_MALWARE_DATA)))
    
    return result

def test_malware_module():
    """
    Test function to verify the malware module is working correctly.
    """
    print("Testing mock malware family module...")
    
    # Test searching for malware families
    print("\nSearching for ransomware families:")
    ransomware = search_malware_families(search_term="ransomware", limit=5)
    print(f"Found {len(ransomware)} ransomware families")
    
    if ransomware:
        # Print sample data
        print("\nSample malware family data:")
        sample = ransomware[0]
        print(f"Name: {sample.get('name')}")
        print(f"Publish Date: {sample.get('publish_date')}")
        print(f"Threat Groups: {', '.join(sample.get('threat_groups', []))}")
        print(f"Nation Affiliations: {', '.join(sample.get('nation_affiliations', []))}")
        print(f"Targeted Sectors: {', '.join(sample.get('targeted_sectors', []))}")
        print(f"Targeted Countries: {', '.join(sample.get('targeted_countries', []))}")
        print(f"TTPs Count: {len(sample.get('ttps', []))}")
        
        if sample.get('ttps'):
            print("\nSample TTPs:")
            for ttp in sample.get('ttps')[:3]:  # Show first 3 TTPs
                print(f"- {ttp.get('tactic')}: {ttp.get('technique')} ({ttp.get('technique_id')})")
    
    # Test getting recent malware families
    print("\nGetting recent malware families (last 90 days):")
    recent = get_recent_malware_families(days=90, limit=5)
    print(f"Found {len(recent)} recent malware families")
    
    return ransomware or recent

if __name__ == "__main__":
    test_malware_module() 