#!/usr/bin/env python3

"""
Test script for the malware family module.
This script performs various tests to validate the functionality of the malware_family.py module.
"""

import os
import sys
import json
from datetime import datetime

# Ensure we can import from the data_sources directory
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)  # Add parent directory to path first
if current_dir not in sys.path:
    sys.path.append(current_dir)  # Add current directory to path

# Import functions directly using an absolute import
from data_sources.malware_family import (
    query_malware_families,
    get_malware_details,
    get_malware_mitre_tactics,
    search_malware_families,
    get_recent_malware_families
)

def test_query_malware_families():
    """Test the query_malware_families function."""
    print("\n===== Testing query_malware_families =====")
    
    # Test basic query
    print("\nTest 1: Basic query with default parameters")
    malware_ids = query_malware_families(limit=5)
    
    if malware_ids:
        print(f"✅ Successfully queried malware families: {len(malware_ids)} found")
        print("Sample malware IDs:", malware_ids[:3])
    else:
        print("❌ Failed to retrieve malware IDs")
    
    # Test with filter
    print("\nTest 2: Query with filter for ransomware")
    filter_string = "malware_type:'Ransomware'"
    ransomware_ids = query_malware_families(limit=5, filter_string=filter_string)
    
    if ransomware_ids:
        print(f"✅ Successfully queried ransomware families: {len(ransomware_ids)} found")
        print("Sample ransomware IDs:", ransomware_ids[:3])
    else:
        print("❌ Failed to retrieve ransomware IDs or none matched the filter")

def test_get_malware_details():
    """Test the get_malware_details function."""
    print("\n===== Testing get_malware_details =====")
    
    # First get some malware IDs
    malware_ids = query_malware_families(limit=3)
    
    if not malware_ids:
        print("❌ Cannot test get_malware_details: No malware IDs available")
        return
    
    print(f"\nTest: Getting details for {len(malware_ids)} malware IDs")
    malware_details = get_malware_details(malware_ids)
    
    if malware_details:
        print(f"✅ Successfully retrieved details for {len(malware_details)} malware families")
        
        # Print a sample of the data
        if malware_details:
            sample = malware_details[0]
            print("\nSample malware data:")
            print(f"Name: {sample.get('name', 'Unknown')}")
            print(f"Type: {sample.get('malware_type', 'Unknown')}")
            print(f"First Seen: {sample.get('publish_date', 'Unknown')}")
            
            # Check what fields have data
            print("\nAvailable data fields:")
            for key, value in sample.items():
                if value and (isinstance(value, str) or (isinstance(value, list) and len(value) > 0)):
                    if isinstance(value, list):
                        print(f"- {key}: {len(value)} items")
                    else:
                        print(f"- {key}: Data available")
    else:
        print("❌ Failed to retrieve malware details")

def test_get_malware_mitre_tactics():
    """Test the get_malware_mitre_tactics function."""
    print("\n===== Testing get_malware_mitre_tactics =====")
    
    # First get some malware IDs
    malware_ids = query_malware_families(limit=5)
    
    if not malware_ids:
        print("❌ Cannot test get_malware_mitre_tactics: No malware IDs available")
        return
    
    malware_id = malware_ids[0]
    print(f"\nTest: Getting MITRE tactics for malware ID {malware_id}")
    tactics = get_malware_mitre_tactics(malware_id)
    
    if tactics:
        print(f"✅ Successfully retrieved {len(tactics)} MITRE tactics and techniques")
        
        # Print the first few tactics
        print("\nSample tactics:")
        for tactic in tactics[:3]:
            print(f"- {tactic.get('tactic')}: {tactic.get('technique')} ({tactic.get('technique_id')})")
    else:
        print("❌ Failed to retrieve MITRE tactics or none available for this malware")

def test_search_malware_families():
    """Test the search_malware_families function."""
    print("\n===== Testing search_malware_families =====")
    
    search_terms = ["ransomware", "trojan", "wiper"]
    
    for term in search_terms:
        print(f"\nTest: Searching for '{term}'")
        results = search_malware_families(search_term=term, limit=3)
        
        if results:
            print(f"✅ Found {len(results)} malware families matching '{term}'")
            
            # Print names of found malware
            print("Matching malware:")
            for malware in results:
                print(f"- {malware.get('name', 'Unknown')}")
        else:
            print(f"❌ No malware families found matching '{term}'")

def test_get_recent_malware_families():
    """Test the get_recent_malware_families function."""
    print("\n===== Testing get_recent_malware_families =====")
    
    days = [30, 90, 365]
    
    for day in days:
        print(f"\nTest: Getting malware from last {day} days")
        results = get_recent_malware_families(days=day, limit=5)
        
        if results:
            print(f"✅ Found {len(results)} malware families from the last {day} days")
            
            # Print names and dates
            print("Recent malware:")
            for malware in results:
                print(f"- {malware.get('name', 'Unknown')} (First seen: {malware.get('publish_date', 'Unknown')})")
        else:
            print(f"❌ No malware families found from the last {day} days")

def run_all_tests():
    """Run all test functions."""
    print("==================================================")
    print("MALWARE FAMILY MODULE TESTS")
    print("==================================================")
    
    try:
        # Run all test functions
        test_query_malware_families()
        test_get_malware_details()
        test_get_malware_mitre_tactics()
        test_search_malware_families()
        test_get_recent_malware_families()
        
        print("\n==================================================")
        print("✅ ALL TESTS COMPLETED")
        print("==================================================")
    except Exception as e:
        print(f"\n❌ ERROR DURING TESTING: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_all_tests() 