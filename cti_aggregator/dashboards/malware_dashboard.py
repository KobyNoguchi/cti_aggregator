#!/usr/bin/env python3

"""
Malware Family Dashboard
------------------------
A Streamlit dashboard for displaying malware family data with the following columns:
- Malware name
- Publish date
- Threat group affiliation
- Nation affiliation
- TTPs (Tactics, Techniques, and Procedures)
- Sectors/Nations targeted
"""

import os
import sys
import json
import pandas as pd
import streamlit as st
from datetime import datetime, timedelta

# Add the parent directory to the Python path to allow importing from data_sources
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

# Import the malware family module
from data_sources.malware_family import (
    search_malware_families,
    get_recent_malware_families,
    get_malware_details
)

# Configure the page
st.set_page_config(
    page_title="Malware Family Dashboard",
    page_icon="ðŸ¦ ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Load custom CSS
css_file = os.path.join(current_dir, "style.css")
with open(css_file, "r") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Set up the sidebar for filters
st.sidebar.title("Malware Intelligence")
st.sidebar.image("https://www.crowdstrike.com/wp-content/uploads/2021/01/falcon-logo.png", width=200)

# Search options
search_option = st.sidebar.radio(
    "Search Options:",
    ["Recent Malware", "Search by Name", "Specific Malware ID"]
)

# Filter based on search option
if search_option == "Recent Malware":
    time_period = st.sidebar.slider(
        "Time Period (days):",
        min_value=7,
        max_value=365,
        value=90,
        step=1,
    )
    result_limit = st.sidebar.slider("Number of Results:", 1, 50, 20)
    
    # Add a button to trigger the search
    if st.sidebar.button("Get Recent Malware"):
        with st.spinner(f"Fetching malware families from the last {time_period} days..."):
            malware_data = get_recent_malware_families(days=time_period, limit=result_limit)
            
            if not malware_data:
                st.error("No malware families found in the specified time period.")
            else:
                st.success(f"Found {len(malware_data)} malware families.")
                display_malware_dashboard(malware_data)

elif search_option == "Search by Name":
    search_term = st.sidebar.text_input("Search Term:")
    result_limit = st.sidebar.slider("Number of Results:", 1, 50, 20)
    
    # Add a button to trigger the search
    if st.sidebar.button("Search"):
        if not search_term:
            st.warning("Please enter a search term.")
        else:
            with st.spinner(f"Searching for malware families matching '{search_term}'..."):
                malware_data = search_malware_families(search_term=search_term, limit=result_limit)
                
                if not malware_data:
                    st.error(f"No malware families found matching '{search_term}'.")
                else:
                    st.success(f"Found {len(malware_data)} malware families matching '{search_term}'.")
                    display_malware_dashboard(malware_data)

else:  # Specific Malware ID
    malware_id = st.sidebar.text_input("Malware ID:")
    
    # Add a button to trigger the search
    if st.sidebar.button("Get Details"):
        if not malware_id:
            st.warning("Please enter a malware ID.")
        else:
            with st.spinner(f"Fetching details for malware ID '{malware_id}'..."):
                malware_data = get_malware_details([malware_id])
                
                if not malware_data:
                    st.error(f"No malware found with ID '{malware_id}'.")
                else:
                    st.success(f"Found malware details for ID '{malware_id}'.")
                    display_malware_dashboard(malware_data)

# Display initial message if no search has been performed
if 'malware_data' not in locals():
    st.title("Malware Family Dashboard")
    st.markdown("""
    ## Welcome to the Malware Intelligence Dashboard
    
    This dashboard provides information about malware families from the CrowdStrike Falcon Intelligence API.
    
    ### Available Information:
    - Malware name and aliases
    - Publish date (first seen) and last update date
    - Associated threat groups and nation affiliations
    - Tactics, Techniques, and Procedures (TTPs) using MITRE ATT&CK framework
    - Targeted sectors and countries
    
    Use the sidebar on the left to search for malware families or view recent additions.
    """)

def display_malware_dashboard(malware_data):
    """
    Display the malware data in a dashboard format.
    
    Args:
        malware_data (list): List of malware family objects
    """
    st.title("Malware Family Dashboard")
    
    # Create tabs for different views
    tab1, tab2, tab3 = st.tabs(["Overview", "Detailed View", "Raw Data"])
    
    with tab1:
        display_overview(malware_data)
    
    with tab2:
        display_detailed_view(malware_data)
    
    with tab3:
        display_raw_data(malware_data)

def display_overview(malware_data):
    """Display an overview of the malware data."""
    st.header("Malware Overview")
    
    # Create a DataFrame for easier data manipulation
    overview_data = []
    
    for malware in malware_data:
        # Join list fields into strings
        threat_groups = ", ".join(malware.get("threat_groups", [])) if malware.get("threat_groups") else "Unknown"
        nation_affiliations = ", ".join(malware.get("nation_affiliations", [])) if malware.get("nation_affiliations") else "Unknown"
        targeted_sectors = ", ".join(malware.get("targeted_sectors", [])) if malware.get("targeted_sectors") else "Unknown"
        targeted_countries = ", ".join(malware.get("targeted_countries", [])) if malware.get("targeted_countries") else "Unknown"
        
        # Count TTPs
        ttps_count = len(malware.get("ttps", []))
        
        # Add data to the list
        overview_data.append({
            "Malware Name": malware.get("name", "Unknown"),
            "Type": malware.get("malware_type", "Unknown"),
            "First Seen": malware.get("publish_date", "Unknown"),
            "Threat Groups": threat_groups,
            "Nation Affiliations": nation_affiliations,
            "TTPs Count": ttps_count,
            "Targeted Sectors": targeted_sectors,
            "Targeted Countries": targeted_countries,
        })
    
    # Convert to DataFrame
    df = pd.DataFrame(overview_data)
    
    # Display the DataFrame
    st.dataframe(df, use_container_width=True)
    
    # Generate visualizations
    if len(malware_data) > 1:
        st.subheader("Malware Distribution by Type")
        type_counts = df["Type"].value_counts().reset_index()
        type_counts.columns = ["Type", "Count"]
        st.bar_chart(type_counts.set_index("Type"))

def display_detailed_view(malware_data):
    """Display a detailed view of the malware data with expandable sections."""
    st.header("Detailed Malware Information")
    
    for malware in malware_data:
        with st.expander(f"{malware.get('name', 'Unknown')} ({malware.get('malware_type', 'Unknown')})"):
            # Create columns for layout
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### Basic Information")
                
                # Display aliases if available
                if malware.get('aliases'):
                    aliases = ", ".join(malware.get('aliases', []))
                    st.markdown(f"**Also Known As:** {aliases}")
                
                st.markdown(f"**ID:** {malware.get('id', 'N/A')}")
                st.markdown(f"**Type:** {malware.get('malware_type', 'Unknown')}")
                st.markdown(f"**First Seen:** {malware.get('publish_date', 'Unknown')}")
                st.markdown(f"**Last Updated:** {malware.get('last_updated', 'Unknown')}")
                
                # Display threat groups with styled elements
                st.markdown("### Associated Threat Groups")
                if malware.get('threat_groups'):
                    threat_html = ""
                    for group in malware.get('threat_groups', []):
                        threat_html += f'<span class="affiliation-item">{group}</span> '
                    st.markdown(f'<div class="threat-data">{threat_html}</div>', unsafe_allow_html=True)
                else:
                    st.markdown("None identified")
                
                # Display nation affiliations with styled elements
                st.markdown("### Nation Affiliations")
                if malware.get('nation_affiliations'):
                    nation_html = ""
                    for nation in malware.get('nation_affiliations', []):
                        nation_html += f'<span class="affiliation-item">{nation}</span> '
                    st.markdown(f'<div class="threat-data">{nation_html}</div>', unsafe_allow_html=True)
                else:
                    st.markdown("None identified")
            
            with col2:
                # Display targeted sectors with styled elements
                st.markdown("### Targeted Sectors")
                if malware.get('targeted_sectors'):
                    sector_html = ""
                    for sector in malware.get('targeted_sectors', []):
                        sector_html += f'<span class="target-item">{sector}</span> '
                    st.markdown(f'<div class="threat-data">{sector_html}</div>', unsafe_allow_html=True)
                else:
                    st.markdown("None identified")
                
                # Display targeted countries with styled elements
                st.markdown("### Targeted Countries")
                if malware.get('targeted_countries'):
                    country_html = ""
                    for country in malware.get('targeted_countries', []):
                        country_html += f'<span class="target-item">{country}</span> '
                    st.markdown(f'<div class="threat-data">{country_html}</div>', unsafe_allow_html=True)
                else:
                    st.markdown("None identified")
            
            # Display description if available
            if malware.get('description'):
                st.markdown("### Description")
                st.markdown(f'<div class="threat-data">{malware.get("description", "No description available")}</div>', unsafe_allow_html=True)
            
            # Display TTPs with styled elements
            st.markdown("### Tactics, Techniques & Procedures (TTPs)")
            if malware.get('ttps'):
                # Group TTPs by tactic
                ttps_by_tactic = {}
                for ttp in malware.get('ttps', []):
                    tactic = ttp.get('tactic', 'Unknown')
                    if tactic not in ttps_by_tactic:
                        ttps_by_tactic[tactic] = []
                    
                    technique_id = ttp.get('technique_id', '')
                    technique = ttp.get('technique', 'Unknown')
                    ttps_by_tactic[tactic].append((technique, technique_id))
                
                # Create tabs for each tactic
                if ttps_by_tactic:
                    tactic_tabs = st.tabs(list(ttps_by_tactic.keys()))
                    
                    for i, (tactic, techniques) in enumerate(ttps_by_tactic.items()):
                        with tactic_tabs[i]:
                            technique_html = ""
                            for technique, technique_id in techniques:
                                technique_html += f'<span class="mitre-technique">{technique} ({technique_id})</span> '
                            st.markdown(f'<div class="threat-data">{technique_html}</div>', unsafe_allow_html=True)
            else:
                st.markdown("None identified")

def display_raw_data(malware_data):
    """Display the raw JSON data."""
    st.header("Raw Data")
    st.json(malware_data)

if __name__ == "__main__":
    st.write("To run this dashboard, use: streamlit run dashboards/malware_dashboard.py") 